---
import Link from "@components/ui/Link.astro";
import SearchIcon from "@components/ui/icons/SearchIcon.astro";
import MenuIcon from "@components/ui/icons/MenuIcon.astro";
import CloseIcon from "@components/ui/icons/CloseIcon.astro";
import Dropdown from "@components/ui/dropdowns/Dropdown.astro";
import DropdownItem from "@components/ui/dropdowns/DropdownItem.astro";
import {
  getHeaderNavigation,
  isDropdownActive,
  isItemActive,
  type NavigationItem,
  type NavigationChild,
} from "src/lib/navigation";

const currentPath = Astro.url.pathname;
const headerNavigation = getHeaderNavigation();
---

<div class="relative" data-controller="navbar">
  <div class="py-4 border-b">
    <div class="container" data-js-navbar>
      <nav class="flex items-center justify-between font-sans">
        <div class="flex flex-1">
          <Link href="/" class="font-semibold" variant="secondary"> Alessandro Desantis </Link>
        </div>

        <div class:list={["hidden flex-col gap-y-4", "md:flex md:flex-row md:gap-x-4", "flex-1 justify-end"]}>
          {
            headerNavigation.map((item: NavigationItem) => {
              if (item.children && item.children.length > 0) {
                return (
                  <div class="whitespace-nowrap">
                    <Dropdown label={item.text} href={item.href} active={isDropdownActive(item, currentPath)}>
                      {item.children.map((child: NavigationChild) => (
                        <DropdownItem href={child.href} active={isItemActive(child, currentPath)}>
                          {child.text}
                        </DropdownItem>
                      ))}
                    </Dropdown>
                  </div>
                );
              } else {
                return (
                  <div class="whitespace-nowrap">
                    <Link href={item.href} variant="secondary" active={isItemActive(item, currentPath)}>
                      {item.text}
                    </Link>
                  </div>
                );
              }
            })
          }

          <button
            class="flex items-center hover:text-orange-700 transition-colors"
            aria-label="Search"
            data-js-command-palette-toggle
          >
            <SearchIcon />
          </button>
        </div>

        <div class="flex items-center gap-x-4 md:hidden">
          <button class="hover:text-orange-700 transition-colors" aria-label="Search" data-js-command-palette-toggle>
            <SearchIcon />
          </button>

          <button
            class="hover:text-orange-700"
            aria-label="Toggle menu"
            data-navbar-target="mobileToggle"
            data-action="click->navbar#openMenu"
          >
            <MenuIcon />
          </button>
        </div>
      </nav>
    </div>
  </div>

  <div
    class="fixed inset-y-0 right-0 w-64 bg-zinc-50 shadow-lg transform translate-x-full transition-transform duration-300 ease-in-out z-50 md:hidden"
    data-navbar-target="mobileMenu"
  >
    <nav class="flex flex-col font-sans p-6 h-full">
      <div class="flex justify-end">
        <button
          class="p-2 hover:text-orange-700"
          aria-label="Close menu"
          data-navbar-target="mobileClose"
          data-action="click->navbar#closeMenu"
        >
          <CloseIcon />
        </button>
      </div>

      <div class="flex flex-col space-y-2">
        {
          headerNavigation.flatMap((item: NavigationItem) => {
            if (item.children && item.children.length > 0) {
              return [
                <Link
                  href={item.href}
                  variant="secondary"
                  active={isDropdownActive(item, currentPath)}
                  class="font-semibold"
                >
                  {item.text}
                </Link>,
                ...item.children.map((child: NavigationChild) => (
                  <Link href={child.href} variant="secondary" active={isItemActive(child, currentPath)} class="pl-4">
                    {child.text}
                  </Link>
                )),
              ];
            } else {
              return [
                <Link href={item.href} variant="secondary" active={isItemActive(item, currentPath)}>
                  {item.text}
                </Link>,
              ];
            }
          })
        }
      </div>
    </nav>
  </div>
</div>

<script>
  import NavbarController from "./navbar-controller";
  import { Application } from "@hotwired/stimulus";

  const application = Application.start();
  application.register("navbar", NavbarController);
</script>
