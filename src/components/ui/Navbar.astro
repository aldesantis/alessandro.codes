---
import Link from "@components/ui/Link.astro";
import SearchIcon from "@components/ui/SearchIcon.astro";
import CommandPalette from "@components/ui/command-palette/CommandPalette.astro";

const currentPath = Astro.url.pathname;

const links = [
  { href: "/", text: "Home", matchPattern: /^\/$/ },
  { href: "/now", text: "Now", matchPattern: /^\/now/ },
  { href: "/talks", text: "Talks", matchPattern: /^\/talks/ },
  { href: "/essays", text: "Essays", matchPattern: /^\/essays/ },
  { href: "/notes", text: "Notes", matchPattern: /^\/notes/ },
  { href: "/books", text: "Books", matchPattern: /^\/books/ },
];
---

<div class="relative">
  <div class="py-4 border-b mb-8">
    <div class="container" data-js-navbar>
      <nav class="flex items-center justify-between font-sans">
        <div class="flex flex-1">
          <Link href="/" class="font-semibold" variant="secondary">
            Alessandro Desantis
          </Link>
        </div>

        <div
          class:list={[
            "hidden flex-col gap-y-4",
            "sm:flex sm:flex-row sm:gap-x-4",
            "flex-1 justify-end",
          ]}
        >
          {
            links.map(({ href, text, matchPattern }) => (
              <div>
                <Link
                  href={href}
                  variant="secondary"
                  active={!!currentPath.match(matchPattern)}
                >
                  {text}
                </Link>
              </div>
            ))
          }

          <button
            class="flex items-center hover:text-orange-700 transition-colors"
            aria-label="Search"
            data-js-search-toggle
          >
            <SearchIcon />
          </button>
        </div>

        <button
          class="sm:hidden hover:text-orange-700"
          aria-label="Toggle menu"
          data-js-mobile-toggle
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </nav>
    </div>
  </div>

  <div
    class="fixed inset-y-0 right-0 w-64 bg-zinc-50 shadow-lg transform translate-x-full transition-transform duration-300 ease-in-out z-50 sm:hidden"
    data-js-mobile-menu
  >
    <nav class="flex flex-col font-sans p-6 h-full">
      <div class="flex justify-end">
        <button
          class="p-2 hover:text-orange-700"
          aria-label="Close menu"
          data-js-mobile-close
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <div class="flex flex-col space-y-2">
        {
          links.map(({ href, text, matchPattern }) => (
            <Link
              href={href}
              variant="secondary"
              active={!!currentPath.match(matchPattern)}
            >
              {text}
            </Link>
          ))
        }

        <button
          class="flex items-center hover:text-orange-700 transition-colors"
          aria-label="Search"
          data-js-search-toggle-mobile
        >
          <SearchIcon />
          <span class="ml-2">Search</span>
        </button>
      </div>
    </nav>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const navbar = document.querySelector("[data-js-navbar]");
    const mobileMenu = document.querySelector("[data-js-mobile-menu]");
    const mobileToggle = document.querySelector("[data-js-mobile-toggle]");
    const mobileClose = document.querySelector("[data-js-mobile-close]");
    const searchToggle = document.querySelector("[data-js-search-toggle]");
    const searchToggleMobile = document.querySelector(
      "[data-js-search-toggle-mobile]"
    );

    if (!navbar || !mobileMenu || !mobileToggle || !mobileClose) {
      console.error("Required navbar elements not found");
      return;
    }

    function openMenu() {
      if (mobileMenu) {
        mobileMenu.classList.remove("translate-x-full");
        document.body.style.overflow = "hidden";
      }
    }

    function closeMenu() {
      if (mobileMenu) {
        mobileMenu.classList.add("translate-x-full");
        document.body.style.overflow = "";
      }
    }

    mobileToggle.addEventListener("click", openMenu);
    mobileClose.addEventListener("click", closeMenu);

    document.addEventListener("click", (event) => {
      if (
        event.target instanceof Node &&
        navbar &&
        !navbar.contains(event.target) &&
        mobileMenu &&
        !mobileMenu.contains(event.target)
      ) {
        closeMenu();
      }
    });

    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        closeMenu();
      }
    });

    function openCommandPalette() {
      const commandPalette = document.getElementById("command-palette");

      if (commandPalette) {
        closeMenu();

        commandPalette.classList.remove("hidden");

        const dialogPanel = document.getElementById("dialog-panel");
        const searchInput = document.getElementById(
          "search-input"
        ) as HTMLInputElement;

        if (dialogPanel && searchInput) {
          setTimeout(() => {
            dialogPanel.classList.remove("scale-95", "opacity-0");
            searchInput.focus();
          }, 10);
        }
      }
    }

    if (searchToggle) {
      searchToggle.addEventListener("click", (event) => {
        event.stopPropagation();
        openCommandPalette();
      });
    }

    if (searchToggleMobile) {
      searchToggleMobile.addEventListener("click", (event) => {
        event.stopPropagation();
        openCommandPalette();
      });
    }
  });
</script>
