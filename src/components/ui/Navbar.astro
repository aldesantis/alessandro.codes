---
import Link from "@components/ui/Link.astro";
import SearchIcon from "@components/ui/SearchIcon.astro";
import Dropdown from "@components/ui/dropdowns/Dropdown.astro";
import DropdownItem from "@components/ui/dropdowns/DropdownItem.astro";
import {
  getHeaderNavigation,
  isDropdownActive,
  isItemActive,
  type NavigationItem,
  type NavigationChild,
} from "src/lib/navigation";

const currentPath = Astro.url.pathname;
const headerNavigation = getHeaderNavigation();
---

<div class="relative">
  <div class="py-4 border-b mb-8">
    <div class="container" data-js-navbar>
      <nav class="flex items-center justify-between font-sans">
        <div class="flex flex-1">
          <Link href="/" class="font-semibold" variant="secondary">
            Alessandro Desantis
          </Link>
        </div>

        <div
          class:list={[
            "hidden flex-col gap-y-4",
            "md:flex md:flex-row md:gap-x-4",
            "flex-1 justify-end",
          ]}
        >
          {
            headerNavigation.map((item: NavigationItem) => {
              if (item.children && item.children.length > 0) {
                return (
                  <div
                    class:list={[
                      isDropdownActive(item, currentPath) && "text-orange-700",
                    ]}
                  >
                    <Dropdown label={item.text}>
                      {item.children.map((child: NavigationChild) => (
                        <DropdownItem
                          href={child.href}
                          active={isItemActive(child, currentPath)}
                        >
                          {child.text}
                        </DropdownItem>
                      ))}
                    </Dropdown>
                  </div>
                );
              } else {
                return (
                  <div>
                    <Link
                      href={item.href}
                      variant="secondary"
                      active={isItemActive(item, currentPath)}
                    >
                      {item.text}
                    </Link>
                  </div>
                );
              }
            })
          }

          <button
            class="flex items-center hover:text-orange-700 transition-colors"
            aria-label="Search"
            data-js-command-palette-toggle
          >
            <SearchIcon />
          </button>
        </div>

        <div class="flex items-center gap-x-4 md:hidden">
          <button
            class="hover:text-orange-700 transition-colors"
            aria-label="Search"
            data-js-command-palette-toggle
          >
            <SearchIcon />
          </button>

          <button
            class="hover:text-orange-700"
            aria-label="Toggle menu"
            data-js-mobile-toggle
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
          </button>
        </div>
      </nav>
    </div>
  </div>

  <div
    class="fixed inset-y-0 right-0 w-64 bg-zinc-50 shadow-lg transform translate-x-full transition-transform duration-300 ease-in-out z-50 md:hidden"
    data-js-mobile-menu
  >
    <nav class="flex flex-col font-sans p-6 h-full">
      <div class="flex justify-end">
        <button
          class="p-2 hover:text-orange-700"
          aria-label="Close menu"
          data-js-mobile-close
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <div class="flex flex-col space-y-2">
        {
          headerNavigation.flatMap((item: NavigationItem) => {
            if (item.children && item.children.length > 0) {
              // Return only the children items, not the parent
              return item.children.map((child: NavigationChild) => (
                <Link
                  href={child.href}
                  variant="secondary"
                  active={isItemActive(child, currentPath)}
                >
                  {child.text}
                </Link>
              ));
            } else {
              // Return regular items as is
              return [
                <Link
                  href={item.href}
                  variant="secondary"
                  active={isItemActive(item, currentPath)}
                >
                  {item.text}
                </Link>,
              ];
            }
          })
        }
      </div>
    </nav>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const navbar = document.querySelector("[data-js-navbar]");
    const mobileMenu = document.querySelector("[data-js-mobile-menu]");
    const mobileToggle = document.querySelector("[data-js-mobile-toggle]");
    const mobileClose = document.querySelector("[data-js-mobile-close]");

    if (!navbar || !mobileMenu || !mobileToggle || !mobileClose) {
      console.error("Required navbar elements not found");
      return;
    }

    function openMenu() {
      if (mobileMenu) {
        mobileMenu.classList.remove("translate-x-full");
        document.body.style.overflow = "hidden";
      }
    }

    function closeMenu() {
      if (mobileMenu) {
        mobileMenu.classList.add("translate-x-full");
        document.body.style.overflow = "";
      }
    }

    mobileToggle.addEventListener("click", openMenu);
    mobileClose.addEventListener("click", closeMenu);

    document.addEventListener("click", (event) => {
      if (
        event.target instanceof Node &&
        navbar &&
        !navbar.contains(event.target) &&
        mobileMenu &&
        !mobileMenu.contains(event.target)
      ) {
        closeMenu();
      }
    });

    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        closeMenu();
      }
    });
  });
</script>
