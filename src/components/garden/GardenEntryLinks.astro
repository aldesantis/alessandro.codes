---
import Link from "@components/ui/Link.astro";
import type { GardenIndexEntryLink as LinkType } from "src/lib/types/garden";
import { buildContentEntryUrl } from "src/lib/plugins/remarkWikiLink.mjs";
import LinkList from "@components/ui/LinkList.astro";
import MobileCollapsible from "@components/ui/MobileCollapsible.astro";
import { getCollection } from "astro:content";

interface Props {
  outboundLinks: LinkType[];
  inboundLinks: LinkType[];
}

const { outboundLinks, inboundLinks } = Astro.props;

// Helper function to deduplicate links based on slug
const deduplicateLinks = (links: LinkType[]): LinkType[] => {
  const seen = new Set<string>();
  return links.filter((link) => {
    const key = `${link.type}-${link.slug}`;
    if (seen.has(key)) return false;
    seen.add(key);
    return true;
  });
};

const uniqueOutboundLinks = deduplicateLinks(outboundLinks);
const uniqueInboundLinks = deduplicateLinks(inboundLinks);

const essays = await getCollection("essays");
const books = await getCollection("books");
const notes = await getCollection("notes");
const topics = await getCollection("topics");
const talks = await getCollection("talks");
const nows = await getCollection("nows");
const articles = await getCollection("articles");

const getLinkTitle = (link: LinkType): string => {
  switch (link.type) {
    case "essays":
      return essays.find((e) => e.id === link.slug)?.data.title || link.slug;
    case "books":
      return books.find((b) => b.id === link.slug)?.data.title || link.slug;
    case "notes":
      return notes.find((n) => n.id === link.slug)?.data.title || link.slug;
    case "topics":
      return topics.find((t) => t.id === link.slug)?.data.title || link.slug;
    case "talks":
      return talks.find((t) => t.id === link.slug)?.data.title || link.slug;
    case "nows":
      return nows.find((n) => n.id === link.slug)?.data.title || link.slug;
    case "articles":
      return articles.find((a) => a.id === link.slug)?.data.title || link.slug;
    default:
      return link.slug;
  }
};
---

<MobileCollapsible label="Links to">
  {
    uniqueOutboundLinks.length > 0 ? (
      <LinkList>
        {uniqueOutboundLinks.map((link: LinkType) => (
          <li>
            <Link
              class="font-sans"
              href={buildContentEntryUrl({
                type: link.type,
                slug: link.slug,
              })}
              variant="muted"
            >
              {getLinkTitle(link)}
            </Link>
          </li>
        ))}
      </LinkList>
    ) : (
      <div class="font-sans text-sm text-zinc-500">Nothing yet!</div>
    )
  }
</MobileCollapsible>

<MobileCollapsible label="Linked from">
  {
    uniqueInboundLinks.length > 0 ? (
      <LinkList>
        {uniqueInboundLinks.map((link: LinkType) => (
          <li>
            <Link
              class="font-sans"
              href={buildContentEntryUrl({
                type: link.type,
                slug: link.slug,
              })}
              variant="muted"
            >
              {getLinkTitle(link)}
            </Link>
          </li>
        ))}
      </LinkList>
    ) : (
      <div class="font-sans text-sm text-zinc-500">Nothing yet!</div>
    )
  }
</MobileCollapsible>
