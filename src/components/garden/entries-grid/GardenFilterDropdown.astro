---
import GardenFilterItem from "./GardenFilterItem.astro";
import ChevronDownIcon from "@components/ui/icons/ChevronDownIcon.astro";

interface Props {
  label: string;
  filterCategory: "status" | "topics" | "types";
  items: { id: string; label: string }[];
}

const { label, filterCategory, items } = Astro.props;
---

<div data-controller="garden-filter-dropdown" class="relative font-sans">
  <button
    type="button"
    data-garden-filter-dropdown-target="button"
    data-action="click->garden-filter-dropdown#toggle"
    class:list={[
      "group inline-flex items-center justify-center gap-2",
      "rounded-full border-2 border-orange-500 bg-transparent",
      "px-3 py-1.5",
      "text-orange-500 text-sm",
      "transition-all duration-200",
      "focus:outline-none focus:bg-orange-500 focus:text-white",
      "hover:bg-orange-500 hover:text-white",
    ]}
  >
    {label}
    <ChevronDownIcon class="w-3 h-3 transition-all duration-200 group-hover:text-white group-focus:text-white" />
  </button>

  <div
    data-garden-filter-dropdown-target="menu"
    class:list={[
      "absolute left-0 z-10 mt-2 w-56 origin-top-right",
      "rounded-md bg-zinc-50 shadow-md ring-1 ring-black/5",
      "hidden opacity-0 scale-95",
      "transition-all ease-out duration-100"
    ]}
  >
    <div class="py-1">
      <GardenFilterItem id="all" label="All" filterCategory={filterCategory} isAll={true} />
      {items.map((item) => <GardenFilterItem id={item.id} label={item.label} filterCategory={filterCategory} />)}
    </div>
  </div>
</div>

<script>
  import { Controller } from "@hotwired/stimulus";

  class GardenFilterDropdownController extends Controller {
    static override targets = ["button", "menu"];
    declare readonly buttonTarget: HTMLElement;
    declare readonly menuTarget: HTMLElement;
    private closeTimeout: ReturnType<typeof setTimeout> | null = null;
    private isOpen = false;

    override connect() {
      this.close();
      document.addEventListener("click", this.handleClickOutside.bind(this));
    }

    override disconnect() {
      if (this.closeTimeout) {
        clearTimeout(this.closeTimeout);
      }
      document.removeEventListener("click", this.handleClickOutside.bind(this));
    }

    handleClickOutside(event: MouseEvent) {
      if (this.isOpen && !this.element.contains(event.target as Node)) {
        this.close();
      }
    }

    toggle() {
      if (this.isOpen) {
        this.close();
      } else {
        this.open();
      }
    }

    open() {
      if (this.closeTimeout) {
        clearTimeout(this.closeTimeout);
      }
      this.menuTarget.classList.remove("hidden");
      requestAnimationFrame(() => {
        this.menuTarget.classList.remove("opacity-0", "scale-95");
        this.menuTarget.classList.add("opacity-100", "scale-100");
      });
      this.isOpen = true;
    }

    close() {
      this.menuTarget.classList.remove("opacity-100", "scale-100");
      this.menuTarget.classList.add("opacity-0", "scale-95");
      
      this.closeTimeout = setTimeout(() => {
        this.menuTarget.classList.add("hidden");
        this.isOpen = false;
      }, 100);
    }
  }

  import { Application } from "@hotwired/stimulus";
  const application = Application.start();
  application.register("garden-filter-dropdown", GardenFilterDropdownController);
</script>
